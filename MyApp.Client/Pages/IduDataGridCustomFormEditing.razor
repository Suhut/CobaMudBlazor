@page "/idu-datagrid-customformediting-v01"

@using System.Net.Http.Json 
@using System.Text.Json.Serialization
@using System.Text.Json
@inject HttpClient httpClient
@inject IDialogService DialogService

<PageTitle>IDU DataGrid Custom Form Editing</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Custom Form Editing</MudText>

<MudButton OnClick="@AddOpenDialog" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>
<MudDataGrid T="DataGridCustomFormEditingModel" Items="@Elements" ReadOnly="false" EditMode="@(DataGridEditMode.Form)"
              
             Bordered="true" Dense="true" EditTrigger="@(DataGridEditTrigger.Manual)">
    <Columns> 
        <PropertyColumn Property="x => x.Tanggal" Format="dd/MM/yyyy">
            <EditTemplate> 
                <MudDatePicker @bind-Date="context.Item.Tanggal" DateFormat="dd/MM/yyyy" For="@(() => context.Item.Tanggal)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.TemperatureC" Format="#,###.00" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" Format="#,###.00" /> 
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditOpenDialog(@context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid> 
 

@code {

    public async Task AddOpenDialog()
    {
        DataGridCustomFormEditingModel newElement = new(); 

        var parameters = new DialogParameters<IduDataGridCustomFormEditing_Detail>();
        parameters.Add(x => x.Element, newElement); 

        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<IduDataGridCustomFormEditing_Detail>("Add", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var list = Elements.ToList();
            list.Add(newElement);
            Elements = list;
        }
    }

    private async Task EditOpenDialog(DataGridCustomFormEditingModel element)
    {
        string json = JsonSerializer.Serialize(element); 
        DataGridCustomFormEditingModel cloneElement = JsonSerializer.Deserialize<DataGridCustomFormEditingModel>(json); 

        var parameters = new DialogParameters<IduDataGridCustomFormEditing_Detail>();
        parameters.Add(x => x.Element, cloneElement);



        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<IduDataGridCustomFormEditing_Detail>("Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        { 
            var list = Elements.ToList();
            int index = list.IndexOf(element);
            list[index] = cloneElement;
            Elements = list;
        }
    }

    private IEnumerable<DataGridCustomFormEditingModel> Elements = new List<DataGridCustomFormEditingModel>();

    protected override async Task OnInitializedAsync()
    {
        var result = await httpClient.GetFromJsonAsync<List<DataGridCustomFormEditingModel>>("sample-data/weather.json");
        Elements = result.Take(4);
    } 

   


}