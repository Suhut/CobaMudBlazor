@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using MyApp.Shared
@using System.Text.Json
@inject HttpClient httpClient


<MudDialog ClassContent="overflow-auto">
    <DialogContent>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (ChooseType == "Multi")
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Choose</MudButton>
        }
        <MudDataGrid T="WeatherListItemDto"
                     @ref=@_dataGrid
                     ServerData="@(new Func<GridState<WeatherListItemDto>, Task<GridData<WeatherListItemDto>>>(ServerReload))"
                     SortMode="@_sortMode"
                     Filterable
                     FilterMode="DataGridFilterMode.Simple" 
                     SelectedItemsChanged="SelectedItemsChanged">

            <Columns>

                @if (ChooseType != "Multi")
                {
                    <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.CheckCircle" OnClick="@(() => ChooseItem(@context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                }
                else
                {
                    <SelectColumn T="WeatherListItemDto" />
                }

                <PropertyColumn Property="x => x.Date" />
                <PropertyColumn Property="x => x.TemperatureC" />
                <PropertyColumn Property="x => x.Summary" />
                <PropertyColumn Property="x => x.TemperatureF" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="WeatherListItemDto" />
            </PagerContent>
        </MudDataGrid>
    </DialogContent>
</MudDialog>

@code {
    // protected override async Task OnInitializedAsync()
    // {

    // }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {

    //     if (_changeDataSource)
    //     {
    //         _changeDataSource = false;
    //         var currentList = _currentList.ToList() ?? [];
    //         var temps = from t0 in currentList.ToList()
    //                     where _allCheckList.Any(t0_ => t0.Summary == t0_.Summary)
    //                     select t0;
    //         _dataGrid.Selection = temps.ToHashSet();
    //         _selectedItems = temps.ToHashSet();
    //         // StateHasChanged();
    //     }


    // }

    private MudDataGrid<WeatherListItemDto> _dataGrid { get; set; }

    private HashSet<WeatherListItemDto> _currentList { get; set; }

    private List<WeatherListItemDto> _allCheckList { get; set; }

    private HashSet<WeatherListItemDto> _selectedItems { get; set; } = [];

    private bool _changeDataSource = false;

    [Parameter]
    public string ChooseType { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    MudForm _form;

    async Task Submit()
    {
        List<WeatherListItemDto> list = _dataGrid.Selection.ToList();
        MudDialog.Close(DialogResult.Ok(list));
    }
    void Cancel() => MudDialog.Cancel();


    async Task ChooseItem(WeatherListItemDto item)
    {
        var list = new List<WeatherListItemDto> { item };
        MudDialog.Close(DialogResult.Ok(list));
    }


    async Task SelectedItemsChanged(HashSet<WeatherListItemDto> _)
    {
        var currentList = _dataGrid?.ServerItems?.ToList() ?? (_dataGrid?.Items?.ToList() ?? []);
        var allCheckList = _allCheckList ?? [];
        var currentCheckList = _dataGrid?.Selection?.ToList() ?? [];



        //remove : (jika allCheckList ada di currentList) dan tidak ada di currentCheckList
        {
            var temps = from t0 in allCheckList
                        where currentList.Any(t0_ => t0.Summary == t0_.Summary)
                        select t0;
            var result = from t0 in temps
                         where !currentCheckList.Any(t0_ => t0.Summary == t0_.Summary)
                         select t0;

            allCheckList.RemoveAll(delegate (WeatherListItemDto t0)
            {
                return result.Any(t0_ => t0.Summary == t0_.Summary);
            });
        }

        //add : jika currentCheckList tidak ada di allCheckList
        {
            var result = from t0 in currentCheckList
                         where !allCheckList.Any(t0_ => t0.Summary == t0_.Summary)
                         select t0;
            allCheckList.AddRange(result.ToList());
        }

        _allCheckList = allCheckList;


    }


    //---------------------------------

    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    // custom sort by name length
    private Func<WeatherListItemDto, object> _sortBy => x =>
    {
        // if (_sortNameByLength)
        //     return x.Date.Length;
        // else
        return x.Date;
    };

    private string SortInfo = string.Empty;


    private async Task<WeatherListDto> GetWeatherList(GridState<WeatherListItemDto> state)
    {
        GridDataRequestDtov03 requestDto = new();
        requestDto.PageSize = state.PageSize;
        requestDto.Page = state.Page;
        requestDto.SortDefinitions = [];
        requestDto.FilterDefinitions = [];

        foreach (var item in state.SortDefinitions)
        {
            requestDto.SortDefinitions.Add(new GridDataRequestSortDefinitionsv03 { SortBy = item.SortBy, Descending = item.Descending });
        }

        foreach (var item in state.FilterDefinitions)
        {
            requestDto.FilterDefinitions.Add(new GridDataRequestFilterDefinitionsv03 { FieldName = item.Column.PropertyName, Operator = item.Operator, Value = item.Value });
        }

        var response = await httpClient.PostAsJsonAsync<GridDataRequestDtov03>("https://localhost:7117/weatherforecastv03", requestDto);

        var responseContent = response.Content.ReadAsStringAsync().Result;

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        return System.Text.Json.JsonSerializer.Deserialize<WeatherListDto>(responseContent, options);

    }

    private async Task<GridData<WeatherListItemDto>> ServerReload(GridState<WeatherListItemDto> state)
    {

        if (state.SortDefinitions.Any())
        {
            foreach (var item in state.SortDefinitions)
            {
                SortInfo = SortInfo + item.SortBy.ToString() + ' ' + item.Descending.ToString() + " ";
            }
        }



        // GridDataRequestDto requestDto = new GridDataRequestDto { Page = state.Page, PageSize = state.PageSize };
        var result = await GetWeatherList(state);
        _currentList = result.Items.ToHashSet();
        _changeDataSource = true;
        // StateHasChanged();

        var currentList = _currentList.ToList() ?? [];
        var temps = from t0 in currentList.ToList()
                    where _allCheckList.Any(t0_ => t0.Summary == t0_.Summary)
                    select t0;
        // _dataGrid.Selection = temps.ToHashSet();
        // if ((temps?.Count()??0)>0)
        // {
        //     _selectedItems = temps.ToHashSet();
        // }
        // else
        // {
        //     _selectedItems = [];
        // }


        return new GridData<WeatherListItemDto> { TotalItems = result.ItemTotalCount, Items = result.Items };
    }



}

