@page "/idu-datagrid-cellediting-v02"

@using System.Net.Http.Json 
@using System.Text.Json.Serialization
@inject HttpClient httpClient

<PageTitle>IDU DataGrid Cell Editing v01</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Cell Editing v01</MudText>

<MudDataGrid T="Element" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.Tanggal" Format="dd/MM/yyyy"> 
            <EditTemplate>
                <MudDatePicker Date="context.Item.Tanggal.Date" DateChanged="@(d => this.DateChanged(d.Value, context.Item))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.TemperatureC" Format="#,###.00" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" Format="#,###.00" /> 
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
        <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
    </div>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
        <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    private void DateChanged(DateTime date, Element element)
    {
        this.SetDateTime(date, element.Tanggal.TimeOfDay, element);
    }

    private void TimeChanged(TimeSpan time, Element element)
    {
        this.SetDateTime(element.Tanggal.Date, time, element);
    }

    private void SetDateTime(DateTime date, TimeSpan time, Element element)
    {
        element.Tanggal = new DateTime(date.Year, date.Month, date.Day, time.Hours, time.Minutes, time.Seconds);

        // this.log = $"New datetime for element with Id {element.Summary}: {element.Tanggal}";
    }

    private IEnumerable<Element> Elements = new List<Element>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>("sample-data/weather.json");
    }

    // events
    void StartedEditingItem(Element item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Element item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Element item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    public class Element
    {
        [JsonPropertyName("date")]
        public DateTime Tanggal { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public decimal? TemperatureF =>   (32.0m +  (TemperatureC / 0.5556m));
    }

}