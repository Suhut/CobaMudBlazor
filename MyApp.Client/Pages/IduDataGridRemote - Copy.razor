@page "/idu-datagrid-remote-bbb"

@using System.Net.Http.Json
@using MyApp.Shared
@inject HttpClient Http

<PageTitle>IDU DataGrid Remote</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Remote</MudText>

@* <MudDataGrid @ref="@_mudDataGrid" Items="@forecasts" FilterMode="DataGridFilterMode.ColumnFilterRow" Filterable="true" FilterDefinitions="FilterDefinitions" SortDefinitions="SortDefinitions"> *@
<MudDataGrid  ServerData=@(new Func<GridState<WeatherListItemDto>, Task<GridData<WeatherListItemDto>>>(ServerReload)) FilterMode="DataGridFilterMode.ColumnFilterRow" Filterable="true" T="WeatherListItemDto">
    <Columns>
        <PropertyColumn Property="x => x.Date" />
        <PropertyColumn Property="x => x.TemperatureC" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherListDto" />
    </PagerContent>

</MudDataGrid>

@* <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickCheck">Check</MudButton> *@

@code {

    private IEnumerable<WeatherListItemDto> Elements = new List<WeatherListItemDto>();
    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    private int _totalItems;
    private int _currentPage;
    private IEnumerable<WeatherListItemDto> _pagedData;

    // custom sort by name length
    // private Func<WeatherListItemDto, object> _sortBy => x =>
    // {
    //     if (_sortNameByLength)
    //         return x.Name.Length;
    //     else
    //         return x.Name;
    // };

    // private string SortInfo = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<WeatherListDto>("https://localhost:7117/weatherforecast");
        Elements = result.Items;
    }

    private async Task<GridData<WeatherListItemDto>> ServerReload(GridState<WeatherListItemDto> state)
    {
        await LoadData(state.Page, state.PageSize, state);

        return new GridData<WeatherListItemDto> { TotalItems = _totalItems, Items = _pagedData };
    }

    private async Task LoadData(int pageNumber, int pageSize, GridState<WeatherListItemDto> state)
    {
        // if (state.SortDefinitions.Any())
        // {
        //     foreach (var item in state.SortDefinitions)
        //     {
        //         SortInfo = SortInfo + item.SortBy.ToString() + ' ' + item.Descending.ToString() + " ";
        //     }
        // }

        StateHasChanged();

        var result = await Http.GetFromJsonAsync<WeatherListDto>("https://localhost:7117/weatherforecast");
        Elements = result.Items; 

        _totalItems = Elements.ToList().Count();
        _currentPage = pageNumber;
        _pagedData = Elements.ToList().Skip((pageNumber - 1) * pageSize).Take(pageSize);
    }

    // private async Task OnClickCheck()
    // { 
    //     // var test01 = _mudDataGrid.FilterDefinitions.ToList();
    //     // foreach(var item in test01)
    //     // {
    //     //     var columnName = item.Column.PropertyName;
    //     //     var opr = item.Operator;
    //     //     var value = item.Value;
             
    //     // }
    // }

 

    // private MudDataGrid<WeatherListItemDto>? _dataGrid;
    // private GridDataRequestDto _requestDto = new();

    // private async Task<GridData<WeatherListItemDto>> LoadGridData(GridState<WeatherListItemDto> state)
    // {
    //     _requestDto.Page = state.Page;
    //     _requestDto.PageSize = state.PageSize;

    //     WeatherListDto apiResponse = await GetWeatherList(_requestDto);
    //     GridData<WeatherListItemDto> data = new()
    //         {
    //             Items = apiResponse.Items,
    //             TotalItems = apiResponse.ItemTotalCount
    //         };

    //     return data;
    // }

    // private async Task<WeatherListDto> GetWeatherList(GridDataRequestDto requestDto)
    // {
    //     return await Http.GetFromJsonAsync<WeatherListDto>("https://localhost:7117/weatherforecast");
    // }
 
}