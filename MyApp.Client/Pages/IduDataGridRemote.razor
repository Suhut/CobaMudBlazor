@page "/idu-datagrid-remote"

@using System.Net.Http.Json 
@using System.Text.Json.Serialization
@using MyApp.Shared
@inject HttpClient httpClient


<PageTitle>IDU DataGrid Remote</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Remote</MudText>

<MudDataGrid T="WeatherListItemDto"
             ServerData="@(new Func<GridState<WeatherListItemDto>, Task<GridData<WeatherListItemDto>>>(ServerReload))"
             SortMode="@_sortMode">

    <Columns>
        <PropertyColumn Property="x => x.Date" />
        <PropertyColumn Property="x => x.TemperatureC" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherListItemDto" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
    <MudRadioGroup T=SortMode @bind-SelectedOption="@_sortMode">
        <MudRadio Dense=true Option=@SortMode.Multiple Color="Color.Primary">Multiple</MudRadio>
        <MudRadio Dense=true Option=@SortMode.Single Color="Color.Tertiary">Single</MudRadio>
        <MudRadio Dense=true Option=@SortMode.None>None</MudRadio>
    </MudRadioGroup>
</div>

<MudTextField @bind-Value="SortInfo" Label="Output" Variant="Variant.Text" />

@code {
    private IEnumerable<WeatherListItemDto> Elements = new List<WeatherListItemDto>();
    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    private int _totalItems;
    private int _currentPage;
    private IEnumerable<WeatherListItemDto> _pagedData;

    // custom sort by name length
    private Func<WeatherListItemDto, object> _sortBy => x =>
    {
        // if (_sortNameByLength)
        //     return x.Date.Length;
        // else
            return x.Date;
    };

    private string SortInfo = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var result = await httpClient.GetFromJsonAsync<WeatherListDto>("https://localhost:7117/weatherforecast");
        Elements = result.Items;
        // Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    }

    private async Task<GridData<WeatherListItemDto>> ServerReload(GridState<WeatherListItemDto> state)
    {
        await LoadData(state.Page, state.PageSize, state);

        return new GridData<WeatherListItemDto> { TotalItems = _totalItems, Items = _pagedData };
    }

    private async Task LoadData(int pageNumber, int pageSize, GridState<WeatherListItemDto> state)
    {
        if (state.SortDefinitions.Any())
        {
            foreach (var item in state.SortDefinitions)
            {
                SortInfo = SortInfo + item.SortBy.ToString() + ' ' + item.Descending.ToString() + " ";
            }
        }

        StateHasChanged();

        var result = await httpClient.GetFromJsonAsync<WeatherListDto>("https://localhost:7117/weatherforecast");
        Elements = result.Items; 

        _totalItems = Elements.ToList().Count();
        _currentPage = pageNumber;
        _pagedData = Elements.ToList().Skip((pageNumber - 1) * pageSize).Take(pageSize);
    }

    

}