@page "/idu-datagrid-remote-apimmm"

@using System.Net.Http.Json
@using MyApp.Shared
@using System.Text
@using System.Text.Json
@inject HttpClient Http

<PageTitle>IDU DataGrid Remote API</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Remote API</MudText>

@* <MudDataGrid @ref="@_mudDataGrid" Items="@forecasts" FilterMode="DataGridFilterMode.ColumnFilterRow" Filterable="true" FilterDefinitions="FilterDefinitions" SortDefinitions="SortDefinitions"> *@
<MudDataGrid ServerData="LoadGridData"  T="WeatherListItemDto">
    <Columns>
        <PropertyColumn Property="x => x.Date" />
        <PropertyColumn Property="x => x.TemperatureC" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherListDto" />
    </PagerContent>

</MudDataGrid>

@* <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickCheck">Check</MudButton> *@

@code {

    // @inject IMyStateHelper MyStateHelper;

    protected override async Task OnParametersSetAsync()
    {
        _requestDto = new GridDataRequestDto { Page = 0, PageSize = 10 };
    }

    private MudDataGrid<WeatherListItemDto>? _dataGrid;
    private GridDataRequestDto _requestDto = new();

    private async Task<GridData<WeatherListItemDto>> LoadGridData(GridState<WeatherListItemDto> state)
    {
        _requestDto.Page = state.Page;
        _requestDto.PageSize = state.PageSize;
         
        WeatherListDto apiResponse = await GetWeatherList(_requestDto);
        GridData<WeatherListItemDto> data = new()
            {
                Items = apiResponse.Items,
                TotalItems = apiResponse.ItemTotalCount,
               
            };
             

        return data;
    }

    private async Task<WeatherListDto> GetWeatherList(GridDataRequestDto requestDto)
    { 

        var response = await Http.PostAsJsonAsync<GridDataRequestDto>("https://localhost:7117/weatherforecastapi", requestDto);

        var responseContent = response.Content.ReadAsStringAsync().Result;

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        return System.Text.Json.JsonSerializer.Deserialize<WeatherListDto>(responseContent, options);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _dataGrid?.HasPager == true)
        {
            _dataGrid!.CurrentPage = _requestDto.Page;
            await _dataGrid.SetRowsPerPageAsync(_requestDto.PageSize);
        }
    }
 
}