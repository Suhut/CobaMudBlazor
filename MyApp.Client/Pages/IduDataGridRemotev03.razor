@page "/idu-datagrid-remote-v03"

@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using MyApp.Shared
@using System.Text.Json
@inject HttpClient httpClient


<PageTitle>IDU DataGrid Remote v02</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">IDU DataGrid Remote v02</MudText>

<MudDataGrid T="WeatherListItemDto"
             ServerData="@(new Func<GridState<WeatherListItemDto>, Task<GridData<WeatherListItemDto>>>(ServerReload))" 
             SortMode="@_sortMode"
             Filterable
             FilterMode="DataGridFilterMode.Simple">

    <Columns>
        <PropertyColumn Property="x => x.Date" />
        <PropertyColumn Property="x => x.TemperatureC" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.TemperatureF" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherListItemDto" />
    </PagerContent>
</MudDataGrid> 

@code {
    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    // custom sort by name length
    private Func<WeatherListItemDto, object> _sortBy => x =>
    {
        // if (_sortNameByLength)
        //     return x.Date.Length;
        // else
        return x.Date;
    };

    private string SortInfo = string.Empty; 


    private async Task<WeatherListDto> GetWeatherList(GridState<WeatherListItemDto> state)
    {
        GridDataRequestDtov03 requestDto = new();
        requestDto.PageSize = state.PageSize;
        requestDto.Page = state.Page;
        requestDto.SortDefinitions = [];
        requestDto.FilterDefinitions = [];

        foreach (var item in state.SortDefinitions)
        {
            requestDto.SortDefinitions.Add(new GridDataRequestSortDefinitionsv03 { SortBy = item.SortBy, Descending = item.Descending });
        }

        foreach (var item in state.FilterDefinitions)
        { 
            requestDto.FilterDefinitions.Add(new GridDataRequestFilterDefinitionsv03 { FieldName = item.Column.PropertyName, Operator = item.Operator, Value = item.Value });
        }

        var response = await httpClient.PostAsJsonAsync<GridDataRequestDtov03>("https://localhost:7117/weatherforecastv03", requestDto);

        var responseContent = response.Content.ReadAsStringAsync().Result;

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        return System.Text.Json.JsonSerializer.Deserialize<WeatherListDto>(responseContent, options);

    } 

    private async Task<GridData<WeatherListItemDto>> ServerReload(GridState<WeatherListItemDto> state)
    { 

        if (state.SortDefinitions.Any())
        {
            foreach (var item in state.SortDefinitions)
            {
                SortInfo = SortInfo + item.SortBy.ToString() + ' ' + item.Descending.ToString() + " ";
            }
        }

        StateHasChanged();

        // GridDataRequestDto requestDto = new GridDataRequestDto { Page = state.Page, PageSize = state.PageSize };
        var result = await GetWeatherList(state);

        return new GridData<WeatherListItemDto> { TotalItems = result.ItemTotalCount, Items = result.Items };
    }

   



}